{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 7,
    "pending": 0,
    "failures": 1,
    "testsRegistered": 8,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-08-13T07:06:33.941Z",
    "end": "2024-08-13T07:06:51.973Z",
    "duration": 18032
  },
  "results": [
    {
      "uuid": "fc12843c-4d02-406a-8d03-d4822319558e",
      "title": "",
      "fullFile": "cypress/e2e/create-flow/create-home-flow/home-page.cy.ts",
      "file": "cypress/e2e/create-flow/create-home-flow/home-page.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cf0b17ec-7da2-4f5d-b90f-1ee661e26ba9",
          "title": "Home page should visible and work",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Count button should work and show correct count value",
              "fullTitle": "Home page should visible and work Count button should work and show correct count value",
              "timedOut": null,
              "duration": 4166,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  \"./assets/screenshots/create-flow/create-home-flow/home-page.cy.ts/Home page should visible and work -- Count button should work and show correct count value (failed).png\",\n  \"./assets/screenshots/create-flow/create-home-flow/home-page.cy.ts/Home page should visible and work -- Count button should work and show correct count value (failed) (attempt 2).png\",\n  \"./assets/screenshots/create-flow/create-home-flow/home-page.cy.ts/Home page should visible and work -- Count button should work and show correct count value (failed) (attempt 3).png\"\n]",
              "code": "var testEnv = Cypress.env(\"testEnv\");\ncy.wrap(testEnv).should(\"eq\", \"anil\");\ncy.getBySel(\"count-text\").should(\"exist\").and(\"have.text\", \"1\");\ncy.getBySel(\"count-btn\").should(\"exist\").and(\"have.text\", \"Count ++\").click();\ncy.getBySel(\"count-text\").should(\"exist\").and(\"have.text\", \"1\");",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<div>' to have text '1', but the text was '0'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div>' to have text '1', but the text was '0'\n    at Context.eval (webpack:///../e2e/create-flow/create-home-flow/home-page.cy.ts:10:46)",
                "diff": "- '0'\n+ '1'\n"
              },
              "uuid": "65efe535-1b8e-4f2d-b64d-39f10a2eb40d",
              "parentUUID": "cf0b17ec-7da2-4f5d-b90f-1ee661e26ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "users should be loaded from proxy api",
              "fullTitle": "Home page should visible and work users should be loaded from proxy api",
              "timedOut": null,
              "duration": 137,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.intercept(\"GET\", \"/api/users\").as(\"users\");\ncy.wait(\"@users\");\ncy.getBySel(\"users-list\")\n    .should(\"exist\")\n    .within(function () {\n    cy.get(\"li\").should(\"exist\").and(\"have.length\", 10);\n});",
              "err": {},
              "uuid": "f3560456-e684-4893-8992-da20b0a2a970",
              "parentUUID": "cf0b17ec-7da2-4f5d-b90f-1ee661e26ba9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f3560456-e684-4893-8992-da20b0a2a970"
          ],
          "failures": [
            "65efe535-1b8e-4f2d-b64d-39f10a2eb40d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "dd369cd7-4a44-422f-b51d-07868df198a6",
      "title": "",
      "fullFile": "cypress/e2e/todo.cy.ts",
      "file": "cypress/e2e/todo.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c5d14f42-8507-48f3-985c-d316c9a891f0",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 400,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get(\".todo-list li\").should(\"have.length\", 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get(\".todo-list li\").first().should(\"have.text\", \"Pay electric bill\");\ncy.get(\".todo-list li\").last().should(\"have.text\", \"Walk the dog\");",
              "err": {},
              "uuid": "ffaaa3c7-6b24-4c39-817e-e374e895224f",
              "parentUUID": "c5d14f42-8507-48f3-985c-d316c9a891f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 365,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nvar newItem = \"Feed the cat\";\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get(\"[data-test=new-todo]\").type(\"\".concat(newItem, \"{enter}\"));\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get(\".todo-list li\").should(\"have.length\", 3).last().should(\"have.text\", newItem);",
              "err": {},
              "uuid": "ad631494-9b92-4256-b0f8-1cd46a0b1fd3",
              "parentUUID": "c5d14f42-8507-48f3-985c-d316c9a891f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 162,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains(\"Pay electric bill\").parent().find(\"input[type=checkbox]\").check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains(\"Pay electric bill\").parents(\"li\").should(\"have.class\", \"completed\");",
              "err": {},
              "uuid": "06bbb654-9070-4af5-a2ea-0b2f96bb5a23",
              "parentUUID": "c5d14f42-8507-48f3-985c-d316c9a891f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ecc4924a-b037-44d1-ae89-257743aa3ed9",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 230,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains(\"Active\").click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get(\".todo-list li\").should(\"have.length\", 1).first().should(\"have.text\", \"Walk the dog\");\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains(\"Pay electric bill\").should(\"not.exist\");",
                  "err": {},
                  "uuid": "90159003-2aef-4bff-917b-4185d07ea4ca",
                  "parentUUID": "ecc4924a-b037-44d1-ae89-257743aa3ed9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 228,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains(\"Completed\").click();\ncy.get(\".todo-list li\").should(\"have.length\", 1).first().should(\"have.text\", \"Pay electric bill\");\ncy.contains(\"Walk the dog\").should(\"not.exist\");",
                  "err": {},
                  "uuid": "c30ac84c-a2d1-472a-9ffc-7c1a56c93f92",
                  "parentUUID": "ecc4924a-b037-44d1-ae89-257743aa3ed9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 226,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains(\"Clear completed\").click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get(\".todo-list li\").should(\"have.length\", 1).should(\"not.have.text\", \"Pay electric bill\");\n// Finally, make sure that the clear button no longer exists.\ncy.contains(\"Clear completed\").should(\"not.exist\");",
                  "err": {},
                  "uuid": "57a5fadb-c8da-40ca-8754-54c8f8070ad5",
                  "parentUUID": "ecc4924a-b037-44d1-ae89-257743aa3ed9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90159003-2aef-4bff-917b-4185d07ea4ca",
                "c30ac84c-a2d1-472a-9ffc-7c1a56c93f92",
                "57a5fadb-c8da-40ca-8754-54c8f8070ad5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 684,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "ffaaa3c7-6b24-4c39-817e-e374e895224f",
            "ad631494-9b92-4256-b0f8-1cd46a0b1fd3",
            "06bbb654-9070-4af5-a2ea-0b2f96bb5a23"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 927,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mocha",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}